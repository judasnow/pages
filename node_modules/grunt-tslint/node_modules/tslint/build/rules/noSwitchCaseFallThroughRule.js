var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        _super.apply(this, arguments);
    }
    Rule.prototype.apply = function (syntaxTree) {
        return this.applyWithWalker(new NoSwitchCaseFallThroughWalker(syntaxTree, this.getOptions()));
    };
    Rule.FAILURE_STRING_PART = "Expected a 'break' before ";
    return Rule;
})(Lint.Rules.AbstractRule);
exports.Rule = Rule;

var NoSwitchCaseFallThroughWalker = (function (_super) {
    __extends(NoSwitchCaseFallThroughWalker, _super);
    function NoSwitchCaseFallThroughWalker() {
        _super.apply(this, arguments);
    }
    NoSwitchCaseFallThroughWalker.prototype.visitSwitchStatement = function (node) {
        var isFallingThrough = false;

        var position = this.positionAfter(node.switchKeyword, node.openParenToken, node.expression, node.closeParenToken, node.openBraceToken);
        var switchClauses = node.switchClauses;
        for (var i = 0; i < switchClauses.childCount(); i++) {
            var child = switchClauses.childAt(i);
            var kind = child.kind();
            var fullWidth = child.fullWidth();
            if (kind === 233 /* CaseSwitchClause */) {
                position += fullWidth;
                var switchClause = child;
                isFallingThrough = this.fallsThrough(switchClause.statements);

                if (isFallingThrough && switchClause.statements.childCount() > 0 && ((switchClauses.childCount() - 1) > i)) {
                    this.addFailure(this.createFailure(position - child.trailingTriviaWidth(), 1, Rule.FAILURE_STRING_PART + "'case'"));
                }
            } else {
                if (isFallingThrough) {
                    this.addFailure(this.createFailure(position - child.trailingTriviaWidth(), 1, Rule.FAILURE_STRING_PART + "'default'"));
                }

                position += fullWidth;
            }
        }
        _super.prototype.visitSwitchStatement.call(this, node);
    };

    NoSwitchCaseFallThroughWalker.prototype.fallsThrough = function (list) {
        for (var i = 0; i < list.childCount(); i++) {
            var nodeKind = list.childAt(i).kind();
            if (nodeKind === 152 /* BreakStatement */ || nodeKind === 157 /* ThrowStatement */ || nodeKind === 150 /* ReturnStatement */) {
                return false;
            }
        }
        return true;
    };
    return NoSwitchCaseFallThroughWalker;
})(Lint.RuleWalker);
exports.NoSwitchCaseFallThroughWalker = NoSwitchCaseFallThroughWalker;
